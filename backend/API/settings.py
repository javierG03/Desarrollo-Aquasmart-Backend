"""
Django settings for API project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os
import dj_database_url
import sentry_sdk
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from sentry_sdk.integrations.django import DjangoIntegration

load_dotenv()

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = os.environ.get('SECRET_KEY', default=os.getenv("SECRET_KEY"))
DEBUG = 'RENDER' not in os.environ

ALLOWED_HOSTS = []

if RENDER_EXTERNAL_HOSTNAME := os.environ.get('RENDER_EXTERNAL_HOSTNAME'):
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',
    'drf_spectacular',
    'storages',
    'rest_framework.authtoken',
    'rest_framework',
    'users.apps.UsersConfig',
    'auditlog',  
    'iot',
    'plots_lots',
    'AquaSmart',
    'caudal',
    'billing',
    'communication', 
    'mqtt',  
    'IA',
    'audit_log'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',    
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUDITLOG_INCLUDE_ALL_MODELS=True

ROOT_URLCONF = 'API.urls'
AUTH_USER_MODEL = 'users.CustomUser'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  
            os.path.join(BASE_DIR, 'communication/templates'),
            os.path.join(BASE_DIR, 'IA/Modelo'),
            os.path.join(BASE_DIR, 'IA/Scaler'),
              
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'API.wsgi.application'

# Database
DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',
        conn_max_age=600
    )
}

# Password validation
class MaximumLengthValidator:
    def __init__(self, max_length=20):
        self.max_length = max_length
        
    def validate(self, password, user=None):
        if len(password) > self.max_length:
            raise ValidationError(
                _("La contraseña no puede tener más de %(max_length)d caracteres."),
                code='password_too_long',
                params={'max_length': self.max_length},
            )
            
    def get_help_text(self):
        return _("Tu contraseña no puede tener más de %(max_length)d caracteres.") % {'max_length': self.max_length}

class UppercaseValidator:
    def validate(self, password, user=None):
        if not any(char.isupper() for char in password):
            raise ValidationError(
                _("La contraseña debe contener al menos una letra mayúscula."),
                code='password_no_upper',
            )
            
    def get_help_text(self):
        return _("Tu contraseña debe contener al menos una letra mayúscula.")

class LowercaseValidator:
    def validate(self, password, user=None):
        if not any(char.islower() for char in password):
            raise ValidationError(
                _("La contraseña debe contener al menos una letra minúscula."),
                code='password_no_lower',
            )
            
    def get_help_text(self):
        return _("Tu contraseña debe contener al menos una letra minúscula.")

class SpecialCharValidator:
    def __init__(self, special_chars="@#$%^&*()_+-=[]{}|;:'\",.<>/?`~"):
        self.special_chars = special_chars
        
    def validate(self, password, user=None):
        if not any(char in self.special_chars for char in password):
            raise ValidationError(
                _("La contraseña debe contener al menos un carácter especial."),
                code='password_no_symbol',
            )
            
    def get_help_text(self):
        return _("Tu contraseña debe contener al menos un carácter especial.")

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {'user_attributes': ['document', 'first_name', 'last_name', 'email', 'phone'], 'max_similarity': 0.7}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8}
    },
    {'NAME': 'API.settings.MaximumLengthValidator', 'OPTIONS': {'max_length': 20}},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
    {'NAME': 'API.settings.UppercaseValidator'},
    {'NAME': 'API.settings.LowercaseValidator'},
    {'NAME': 'API.settings.SpecialCharValidator'},
]

# Internationalization
LANGUAGE_CODE = 'es-CO'
TIME_ZONE = 'America/Bogota'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# Static files
STATIC_URL = 'static/'
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'API.custom_auth.CustomTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'EXCEPTION_HANDLER': 'API.exceptions.custom_exception_handler',
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day',
        'notification': '50/hour'
    },
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

# CORS
CORS_ALLOWED_ORIGINS = [
    "https://tu-frontend.com",
    "http://localhost:5173",
    "http://localhost:8081",
    "https://desarrollo-aqua-smart-frontend-mu.vercel.app",
    "https://desarrollo-aquasmart-frontend2.vercel.app",
    "https://desarrollo-aqua-smart-frontend-six.vercel.app",
    "https://desarrollo-aqua-smart-frontend-psi.vercel.app",
]

# Notification System Configuration
NOTIFICATION_CONFIG = {
    'ENABLED_CHANNELS': {
        'EMAIL': True,
        'SMS': False,
        'PUSH': False,
        'IN_APP': True
    },
    'GROUPS': {
        'ADMIN': 'Administradores',
        'TECH': 'Tecnicos',
        'RECEPTION': 'Recepcion_Reportes'
    },
    'EMAIL_SETTINGS': {
        'HOST': os.getenv('EMAIL_HOST', 'smtp.gmail.com'),
        'USER': os.getenv('EMAIL_HOST_USER', ''),
        'PASSWORD': os.getenv('EMAIL_HOST_PASSWORD', ''),
        'PORT': os.getenv('EMAIL_PORT', 587),
        'USE_TLS': str(os.getenv('EMAIL_USE_TLS', 'True')).lower() == 'true',
        'TIMEOUT': int(os.getenv('EMAIL_TIMEOUT', 5)),
        'DELIVERY_TIMEOUTS': {
            'EMAIL': 300  # 5 minutos para cumplir RF71 (en segundos)
        }
    },
    'RECIPIENTS': {
        'ADMIN_EMAILS': [email.strip() for email in os.getenv('ADMIN_EMAILS', '').split(',')],
        'DEFAULT_FROM': os.getenv('EMAIL_HOST_USER', ''),
        'REPLY_TO': os.getenv('EMAIL_REPLY_TO', '')
    },
    'TEMPLATES': {
        'EMAIL': {
            'REPORT_CREATED': {
                'path': 'emails/report_created.html',
                'subject': '[AquaSmart] Nuevo Reporte #{report_id}',
                'priority': 'high'
            },
            'REPORT_ASSIGNED': {
                'path': 'emails/report_assigned.html',
                'subject': '[AquaSmart] Asignación de Reporte #{report_id}',
                'priority': 'medium'
            },
            'REPORT_COMPLETED': {
                'path': 'emails/report_completed.html',
                'subject': '[AquaSmart] Reporte #{report_id} Completado y Aprobado',
                'priority': 'low',
                'timeout': 300  # 5 minutos para RF71
            }
        }
    },
    'SETTINGS': {
        'APP_NAME': 'AquaSmart',
        'FRONTEND_URL': os.getenv('FRONTEND_URL', 'http://localhost:3000')
    },
    'MONITORING': {
        'SENTRY_DSN': os.getenv('SENTRY_DSN', ''),
        'LOG_LEVEL': os.getenv('NOTIFICATION_LOG_LEVEL', 'INFO'),
        'MAX_RETRIES': 3
    }
}

# Configuración adicional de email para Django
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['HOST']
EMAIL_PORT = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['PORT']
EMAIL_HOST_USER = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['USER']
EMAIL_HOST_PASSWORD = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['PASSWORD']
EMAIL_USE_TLS = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['USE_TLS']
EMAIL_TIMEOUT = NOTIFICATION_CONFIG['EMAIL_SETTINGS']['DELIVERY_TIMEOUTS']['EMAIL']
DEFAULT_FROM_EMAIL = NOTIFICATION_CONFIG['RECIPIENTS']['DEFAULT_FROM']


# Spectacular Settings
SPECTACULAR_SETTINGS = {
    "TITLE": "AQUASMART - Sistema de Gestión de Riego",
    "DESCRIPTION": "API para la gestión inteligente de sistemas de riego en Colombia",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": r'/api/',
    "COMPONENT_SPLIT_REQUEST": True,
    "ENUM_NAME_OVERRIDES": {
        "NotificationType": "notification.models.Notification.NotificationTypes",
        "ReportStatus": "reportes.models.Reporte.Status",
    },
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
    },
}

# # Auditlog Configuration
# AUDITLOG_INCLUDE_TRACKING_MODELS = [
#     'notification.models.Notification',
#     'notification.models.EmailNotification',
#     'reportes.models.Reporte',
#     'reportes.models.AsignacionReporte',
#     'reportes.models.InformeMantenimiento',
# ]

AUDITLOG_CONFIG = {
    'USE_JSONFIELD': True,
    'REGISTER_ADMIN': True,
}

# Google Drive Storage
GOOGLE_DRIVE_STORAGE_JSON_KEY_FILE = os.path.join(BASE_DIR, 'API/google/client_secret.json')
GOOGLE_DRIVE_STORAGE_MEDIA_ROOT = 'Prueba'
DEFAULT_FILE_STORAGE = 'storages.backends.google_drive.GoogleDriveStorage'

# Security Headers
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

# Sentry Configuration
if not DEBUG and os.getenv('SENTRY_DSN'):
    sentry_sdk.init(
        dsn=os.getenv('SENTRY_DSN'),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
        environment="production" if not DEBUG else "development"
    )